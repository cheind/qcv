#summary Best practices

=Design for Responsiveness=

When you have a long running operation carried out in your filter, make sure that you periodically test for a pending cancellation event. In case a cancellation event is pending, gracefully abort the filters work. Doing so ensures a responsive behaviour of the runtime.

Here is an example that imitates a long running operation by an endless loop.

{{{
// qcv.exe -s stay_responsive.cs Example.Design.StayResponsive --run

using System;
using System.Collections.Generic;

using QCV.Base;
using QCV.Base.Addins;
using QCV.Base.Extensions;

namespace Example.Design {

  [Addin]
  public class StayResponsive : IFilter, IFilterListProvider {

    public FilterList CreateFilterList(AddinHost host) {
      return new FilterList() {
        this
      };
    }

    public void Execute(Dictionary<string, object> bundle) {

      // If you have a long running operation, make sure 
      // to stay responsive to cancellation events.

      while (true) {
        // Test if a stop request is pending
        if (bundle.GetRuntime().StopRequested) {
          return;
        }

        System.Threading.Thread.Sleep(50);
      }
    }

  }
}
}}}